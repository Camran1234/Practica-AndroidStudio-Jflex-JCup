
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.Parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\015\003\000\002\020" +
    "\003\000\002\022\003\000\002\021\003\000\002\023\003" +
    "\000\002\023\003\000\002\005\003\000\002\006\003\000" +
    "\002\025\005\000\002\025\004\000\002\025\002\000\002" +
    "\024\004\000\002\026\006\000\002\007\004\000\002\010" +
    "\006\000\002\011\006\000\002\012\007\000\002\013\007" +
    "\000\002\014\010\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\006\000\002\003\006\000\002" +
    "\003\003\000\002\004\004\000\002\017\005\000\002\016" +
    "\005\000\002\002\004\000\002\002\003\000\002\002\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\010\003\004\014\005\015\010\001\002\000" +
    "\004\002\uffe2\001\002\000\016\003\046\007\050\010\052" +
    "\011\044\012\051\013\045\001\002\000\004\002\043\001" +
    "\002\000\004\002\uffe3\001\002\000\004\005\011\001\002" +
    "\000\006\005\ufffa\020\ufffa\001\002\000\004\005\011\001" +
    "\002\000\004\002\uffe7\001\002\000\004\021\041\001\002" +
    "\000\004\005\011\001\002\000\004\020\022\001\002\000" +
    "\004\006\021\001\002\000\004\002\uffe5\001\002\000\012" +
    "\002\ufff9\006\ufff9\017\ufff9\021\ufff9\001\002\000\010\006" +
    "\ufffd\017\ufffd\021\ufffd\001\002\000\004\006\021\001\002" +
    "\000\006\006\ufff6\017\025\001\002\000\006\005\000\020" +
    "\000\001\002\000\004\006\ufff5\001\002\000\006\005\011" +
    "\020\022\001\002\000\006\006\ufff7\021\ufff7\001\002\000" +
    "\010\006\ufff6\017\025\021\ufff6\001\002\000\006\006\ufff8" +
    "\021\ufff8\001\002\000\010\006\ufff6\017\025\021\ufff6\001" +
    "\002\000\006\006\ufff4\021\ufff4\001\002\000\006\012\036" +
    "\016\040\001\002\000\004\006\ufffc\001\002\000\004\006" +
    "\uffe6\001\002\000\004\006\ufffb\001\002\000\012\004\ufffe" +
    "\005\ufffe\012\ufffe\016\ufffe\001\002\000\012\004\ufff3\005" +
    "\ufff3\012\ufff3\016\ufff3\001\002\000\004\002\001\001\002" +
    "\000\004\005\011\001\002\000\004\005\011\001\002\000" +
    "\004\002\uffe8\001\002\000\004\002\uffe4\001\002\000\004" +
    "\005\011\001\002\000\004\005\011\001\002\000\004\005" +
    "\011\001\002\000\004\005\011\001\002\000\004\005\011" +
    "\001\002\000\004\006\021\001\002\000\004\002\uffec\001" +
    "\002\000\004\005\011\001\002\000\004\004\062\001\002" +
    "\000\004\006\ufff1\001\002\000\004\006\uffff\001\002\000" +
    "\004\005\011\001\002\000\004\006\021\001\002\000\004" +
    "\005\011\001\002\000\004\005\011\001\002\000\004\005" +
    "\011\001\002\000\004\004\062\001\002\000\004\006\uffef" +
    "\001\002\000\004\002\uffea\001\002\000\004\005\011\001" +
    "\002\000\004\005\011\001\002\000\004\006\021\001\002" +
    "\000\004\002\uffed\001\002\000\004\005\011\001\002\000" +
    "\004\004\062\001\002\000\004\006\ufff2\001\002\000\004" +
    "\005\011\001\002\000\004\005\011\001\002\000\004\006" +
    "\021\001\002\000\004\002\uffe9\001\002\000\004\005\011" +
    "\001\002\000\004\005\011\001\002\000\004\005\011\001" +
    "\002\000\004\004\062\001\002\000\004\006\uffee\001\002" +
    "\000\004\005\011\001\002\000\004\005\011\001\002\000" +
    "\004\006\021\001\002\000\004\002\uffeb\001\002\000\004" +
    "\005\011\001\002\000\004\005\011\001\002\000\004\004" +
    "\062\001\002\000\004\006\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\006\002\005\004\006\001\001\000\002\001" +
    "\001\000\004\003\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\011\016\012\001\001\000\002\001" +
    "\001\000\012\005\015\007\014\017\016\026\013\001\001" +
    "\000\002\001\001\000\004\022\041\001\001\000\010\005" +
    "\015\007\034\026\013\001\001\000\006\021\023\024\022" +
    "\001\001\000\004\006\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\032\001\001" +
    "\000\006\015\026\025\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\015\021\030\026\027\001\001" +
    "\000\002\001\001\000\006\015\026\025\031\001\001\000" +
    "\002\001\001\000\006\015\026\025\033\001\001\000\002" +
    "\001\001\000\004\023\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\112\001\001\000" +
    "\004\005\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\072\001\001\000\004\005\062\001\001\000" +
    "\004\005\052\001\001\000\012\005\015\007\053\011\054" +
    "\026\013\001\001\000\010\005\015\007\056\026\013\001" +
    "\001\000\004\006\055\001\001\000\002\001\001\000\010" +
    "\005\015\007\057\026\013\001\001\000\004\020\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\015" +
    "\007\064\013\063\026\013\001\001\000\004\006\071\001" +
    "\001\000\010\005\015\007\065\026\013\001\001\000\010" +
    "\005\015\007\066\026\013\001\001\000\010\005\015\007" +
    "\067\026\013\001\001\000\004\020\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\015\007\073\010" +
    "\074\026\013\001\001\000\010\005\015\007\076\026\013" +
    "\001\001\000\004\006\075\001\001\000\002\001\001\000" +
    "\010\005\015\007\077\026\013\001\001\000\004\020\100" +
    "\001\001\000\002\001\001\000\012\005\015\007\102\014" +
    "\103\026\013\001\001\000\010\005\015\007\105\026\013" +
    "\001\001\000\004\006\104\001\001\000\002\001\001\000" +
    "\010\005\015\007\106\026\013\001\001\000\010\005\015" +
    "\007\107\026\013\001\001\000\010\005\015\007\110\026" +
    "\013\001\001\000\004\020\111\001\001\000\002\001\001" +
    "\000\012\005\015\007\113\012\114\026\013\001\001\000" +
    "\010\005\015\007\116\026\013\001\001\000\004\006\115" +
    "\001\001\000\002\001\001\000\010\005\015\007\117\026" +
    "\013\001\001\000\010\005\015\007\120\026\013\001\001" +
    "\000\004\020\121\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public parser (Lexema lexema){
		super(lexema);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= g EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // op ::= OPERATOR 
            {
              Object RESULT =null;
		int operatorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operatorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object operator = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cl ::= COLOR 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // m ::= COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("m",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // n ::= NUMBER 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object number = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("n",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // q ::= LINE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("q",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // q ::= CURVE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("q",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // r ::= OPENPARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("r",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // t ::= CLOSEPARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ox ::= op n ox 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ox",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ox ::= op l 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ox",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ox ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ox",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // o ::= n ox 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // l ::= r o t ox 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("l",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // a ::= l m 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("a",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // c ::= a a a cl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("c",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // s ::= a a a cl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // re ::= a a a a cl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("re",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // li ::= a a a a cl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("li",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // p ::= a a a a a cl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // gr ::= CIRCLE r c t 
            {
              Object RESULT =null;
		 System.out.println("Se encontro un circulo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // gr ::= SQUARE r s t 
            {
              Object RESULT =null;
		 System.out.println("Se encontro un cuadrado");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // gr ::= RECTANGLE r re t 
            {
              Object RESULT =null;
		 System.out.println("Se encontro un rectangulo");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // gr ::= LINE r li t 
            {
              Object RESULT =null;
		 System.out.println("Se encontro una linea");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // gr ::= POLYGON r p t 
            {
              Object RESULT =null;
		 System.out.println("Se encontro un poligono");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("gr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // gr ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("gr",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // an ::= ANIMATE d 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("an",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // de ::= a a q 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("de",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // d ::= r de t 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("d",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // g ::= CHART gr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("g",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // g ::= an 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("g",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // g ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("g",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
